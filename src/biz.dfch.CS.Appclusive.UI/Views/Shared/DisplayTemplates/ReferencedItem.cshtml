@model biz.dfch.CS.Appclusive.UI.Models.Core.Job
@using biz.dfch.CS.Appclusive.UI.App_LocalResources
@using biz.dfch.CS.Appclusive.UI.Models.Core

@if (Model != null)
{
    bool showLink = ViewBag.ShowLink == null ? true : (bool)ViewBag.ShowLink;
    if (showLink && Model.EntityKind != null && !string.IsNullOrEmpty(Model.RefId))
    {
        string id = (string)ViewContext.Controller.ControllerContext.RouteData.Values["id"];
        string action = (string)ViewContext.Controller.ControllerContext.RouteData.Values["action"];
        string controller = (string)ViewContext.Controller.ControllerContext.RouteData.Values["controller"];
        switch (Model.EntityKind.EntityKindId)
        {
            case biz.dfch.CS.Appclusive.Contracts.Constants.EntityKindId.Approval:
                if (biz.dfch.CS.Appclusive.UI.Navigation.PermissionDecisions.Current.HasPermission(typeof(Approval), "CanRead"))
                {
                    @Html.ActionLink(Model.RefId, "Details", "Approval", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                }
                else
                {
                    @Html.DisplayFor(model => model.RefId)
                }
                break;
            case biz.dfch.CS.Appclusive.Contracts.Constants.EntityKindId.Job:
                if (biz.dfch.CS.Appclusive.UI.Navigation.PermissionDecisions.Current.HasPermission(typeof(Job), "CanRead"))
                {
                    @Html.ActionLink(Model.RefId, "Details", "Jobs", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                }
                else
                {
                    @Html.DisplayFor(model => model.RefId)
                }
                break;
            case biz.dfch.CS.Appclusive.Contracts.Constants.EntityKindId.Node:
                if (biz.dfch.CS.Appclusive.UI.Navigation.PermissionDecisions.Current.HasPermission(typeof(Node), "CanRead"))
                {
                    @Html.ActionLink(Model.RefId, "Details", "Nodes", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                }
                else
                {
                    @Html.DisplayFor(model => model.RefId)
                }
                break;
            case biz.dfch.CS.Appclusive.Contracts.Constants.EntityKindId.Order:
                if (biz.dfch.CS.Appclusive.UI.Navigation.PermissionDecisions.Current.HasPermission(typeof(Order), "CanRead"))
                {
                    @Html.ActionLink(Model.RefId, "Details", "Orders", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                }
                else
                {
                    @Html.DisplayFor(model => model.RefId)
                }
                break;
            default:
            @Html.DisplayFor(model => model.RefId)
                break;
        }
    }
    else
    {
        @Html.DisplayFor(model => model.RefId)
    }
}