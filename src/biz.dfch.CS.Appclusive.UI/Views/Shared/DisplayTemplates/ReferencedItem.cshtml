@model biz.dfch.CS.Appclusive.UI.Models.Core.Job
@using biz.dfch.CS.Appclusive.UI.App_LocalResources

@if (Model != null)
{
    if (Model.EntityKind != null && !string.IsNullOrEmpty(Model.RefId))
    {
        string id = (string)ViewContext.Controller.ControllerContext.RouteData.Values["id"];
        string action = (string)ViewContext.Controller.ControllerContext.RouteData.Values["action"];
        string controller = (string)ViewContext.Controller.ControllerContext.RouteData.Values["controller"];
        switch (Model.EntityKind.Version)
        {
            case biz.dfch.CS.Appclusive.UI.Models.Core.EntityKind.VERSION_OF_Approval:
                @Html.ActionLink(Model.RefId, "Details", "Approval", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                break;
            case biz.dfch.CS.Appclusive.UI.Models.Core.EntityKind.VERSION_OF_Job:
                @Html.ActionLink(Model.RefId, "Details", "Jobs", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                break;
            case biz.dfch.CS.Appclusive.UI.Models.Core.EntityKind.VERSION_OF_Node:
                @Html.ActionLink(Model.RefId, "Details", "Nodes", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                break;
            case biz.dfch.CS.Appclusive.UI.Models.Core.EntityKind.VERSION_OF_Order:
                @Html.ActionLink(Model.RefId, "Details", "Orders", new { id = Model.RefId, rId = id, rAction = action, rController = controller }, null)
                break;
            default:
                @Html.DisplayFor(model => model.RefId)
                break;
        }
    }
    else
    {
        @Html.DisplayFor(model => model.RefId)
    }
}