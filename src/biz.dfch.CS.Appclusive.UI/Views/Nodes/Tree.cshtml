@model IEnumerable<biz.dfch.CS.Appclusive.UI.Models.Tree.Node>
@using biz.dfch.CS.Appclusive.UI.Helpers
@using biz.dfch.CS.Appclusive.UI.App_LocalResources
@{
    ViewBag.Title = @GeneralResources.Nodes;
}

@section Title{


}

@{
    string dataUrl = Url.Action("TreeData");
    string detailUrl = Url.Action("TreeDetails", new { id = 0 });
    var jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(Model, new Newtonsoft.Json.Formatting(), new Newtonsoft.Json.JsonSerializerSettings() { DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore });

}
<div class="row">
    <div class="col-md-4">
        <table style="width:100%">
            <tr>
                <td>
                    <h2>@GeneralResources.Nodes</h2>
                    @*<div class="row">
                        <div class="col-md-8">
                            <input class="form-control text-box single-line ap-autocomplete" id="treeSearchTerm" name="treeSearchTerm" value="@ViewBag.ItemSearchTerm" />
                        </div>
                        <a class="btn btn-primary" onclick="reloadTree()">@GeneralResources.Search</a>
                    </div>*@
                </td>
                <td style="text-align: right; vertical-align: bottom;padding-bottom: 10px;">
                    @Html.ActionLink(GeneralResources.Node + " " + @GeneralResources.List, "Index", "Nodes")
                </td>
            </tr>
        </table>
        <div id="tree" style="overflow-y: auto; height:750px;"></div>
    </div>
    <div id="treeDetail" class="col-md-8">
    </div>
</div>

@using (Html.Delayed())
{
    <script type="text/javascript">
        glyph_opts = {
            map: {
                doc: "glyphicon glyphicon-file",
                docOpen: "glyphicon glyphicon-file",
                checkbox: "glyphicon glyphicon-unchecked",
                checkboxSelected: "glyphicon glyphicon-check",
                checkboxUnknown: "glyphicon glyphicon-share",
                dragHelper: "glyphicon glyphicon-play",
                dropMarker: "glyphicon glyphicon-arrow-right",
                error: "glyphicon glyphicon-warning-sign",
                expanderClosed: "fa fa-plus-square-o",
                expanderLazy: "fa fa-plus-square",  // glyphicon-expand
                expanderOpen: "fa fa-minus-square-o",  // glyphicon-collapse-down
                folder: "fa fa-folder",
                folderOpen: "fa fa-folder-open",
                loading: "fa fa-spinner fa-spin"
            }
        };

        $(function () {
            var data = @Html.Raw(jsonData);
            $('#tree').fancytree({
                extensions: ["glyph", "wide"],
                checkbox: false,
                glyph: glyph_opts,
                source: {
                    url: "@dataUrl",
                    data: { parentId: 0, searchTerm: $('#treeSearchTerm').val() },
                    cache: false,
                    debugDelay: 1000
                },
                toggleEffect: { effect: "drop", options: {direction: "left"}, duration: 400 },
                wide: {
                    iconWidth: "1em",     // Adjust this if fancy-icon-width != "16px"
                    iconSpacing: "0.5em", // Adjust this if fancy-icon-spacing != "3px"
                    levelOfs: "1.5em"     // Adjust this if ul padding != "16px"
                },
                activate: function(event, data){
                    var node = data.node;
                    loadDetail(node.key);
                },
                lazyLoad: function(event, data) {
                    var node = data.node;
                    data.result = {
                        url: "@dataUrl",
                        data: { parentId: node.key, searchTerm: $('#treeSearchTerm').val() },
                        cache: false,
                        debugDelay: 1000
                    };
                },
                clickPaging: function(event, data) {
                    var node = data.node.getPrevSibling();
                    data.node.replaceWith( {
                        url: "@dataUrl",
                        data: { parentId: node.parent.key, pageNr: node.data.pageInfo.PageNr + 1 },
                        cache: false
                    }) ;
                },
                loadChildren: function(event, data) {
                    var node = data.node.getLastChild();
                    if(node != null && node.data != null && node.data.pageInfo!=null && node.data.pageInfo.HasMore){
                        var a = data.node.addPagingNode();
                        data.node.render();
                    }
                },
            });

        })

        function loadDetail(id){
            var detailUrl = "@detailUrl".replace("/0","/"+id);
            $.ajax({
                url: detailUrl,
                cache: false
            })
            .done(function( html ) {
                $("#treeDetail").html(html);
            });
        }

        /* tree-search */
        function reloadTree(){
            var tree = $("#tree").fancytree("getTree");
            tree.reload();
        }

        $(document).ready(function () {
            $('#treeSearchTerm').autocomplete(
              {
                  source: '@Url.Action("Search", (RouteValueDictionary)ViewBag.AjaxSearchRouteValueDictionary)',
                  select: function (event, ui) {
                      $('#treeSearchTerm').val(ui.item.key);
                      $("#treeSearchForm").submit();
                  }
              });
        })

    </script>
}

@using (Html.Delayed(null, "autocompleteInit"))
{
    // because of Autocomplete in TreeDetails
    <script type="text/javascript">

        function InitAutocomplete(searchTermId, modelKeyId, searchSource) {
            $(searchTermId).autocomplete(
              {
                  source: searchSource,
                  select: function (event, ui) {
                      $(searchTermId).val(ui.item.value);
                      $(modelKeyId).val(ui.item.key);
                  }
              });
        }

    </script>
}
